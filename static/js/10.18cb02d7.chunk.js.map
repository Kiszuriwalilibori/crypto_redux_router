{"version":3,"sources":["components/details.js","components/select.js","complexfunctions/getlistofcoins.js","components/search.js","components/radiogroup.js","components/loadedcoinmessage.js","complexfunctions/validatehistorical.js","complexfunctions/getcurrentprice.js"],"names":["Container","withStyles","root","margin","display","flexDirection","height","alignItems","background","paddingTop","Box","ContainerVerticallyCentered","justifyContent","CryptoContainer","width","paddingRight","paddingLeft","marginRight","marginLeft","ColorCircularProgress","color","CircularProgress","_Spinner","React","thickness","size","Button","withRouter","styled","button","StyledAlert","fontWeight","maxWidth","boxShadow","Alert","ValidationAlert","connect","state","visible","validation_alert_visibility","message","severity","createOption","ary","result","value","label","MySelect","cryptos","list_of_all_cryptos","selected_crypto","dispatch","send_selected_crypto","data","props","select_options","map","length","closeMenuOnSelect","className","placeholder","isClearable","isSearchable","onChange","selectValue","options","toPairs","require","extractListOfCryptos","obj","Data","item","hasOwnProperty","CoinName","Loop","MyFormControl","borderRadius","animation","border","padding","backgroundColor","fontFamily","paddingBottom","FormControl","RadioButtonsGroup","base_currency","send_base_currency","component","FormLabel","RadioGroup","aria-label","name","event","target","FormControlLabel","control","Radio","MyAlert","LoadedCoinsMessage","open","list_of_all_cryptos_is_loaded","count","close","hide_loaded_coins_msg","Snackbar","autoHideDuration","onClose","variant","Search","search_results","send_error","send_current","clear_search_results","validate_and_get_historical_data","a","b","redirect","clear","getState","Axios","toggle_validation_alert_visibility","clear_historical","connecting","i","timestamps","reducedLength","push","get","link","historicalPrice","getValue","header","all","then","responseArr","forEach","index","partial","createObject","getKey","send_historical","new_selected_crypto","new_base_currency","search","set_search_results","catch","error","text","code","getListOfAvailableCryptos","x","err","response","send_list_of_all_cryptos","getCurrentCryptoPrice","y","cryptoID","referenceCoin","currentPrice","resp","Response","Object","keys","values","Message","clearLoop","clearInterval","history","useHistory","useMemo","not_found","return_get_current_price","useEffect","setInterval","ID","onClick"],"mappings":"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","file":"static/js/10.18cb02d7.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport {connect} from'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport Box from  '@material-ui/core/Box';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nimport styled from 'styled-components';\r\n\r\nexport const Container = withStyles({\r\n  root:{\r\n    margin:'0 auto', \r\n    display:'flex', \r\n    flexDirection: 'column', \r\n    height:'100vh', \r\n    alignItems: 'center', \r\n    background:'transparent',\r\n    paddingTop:'10vh',\r\n    },\r\n  })(Box);\r\n  \r\n\r\n\r\n  export const ContainerVerticallyCentered = withStyles({\r\n    root:{ \r\n      justifyContent: 'center',\r\n      },\r\n    })(Container);\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  export const CryptoContainer = withStyles({\r\n    root:{\r\n      \r\n      width: '100%',\r\n      paddingRight: '15px',\r\n      paddingLeft: '15px',\r\n      marginRight: 'auto',\r\n      marginLeft: 'auto',\r\n    },\r\n    })(Box);\r\n    \r\n  \r\n\r\n\r\n\r\nconst ColorCircularProgress = withStyles({\r\n    root: {\r\n      color: 'rgba(122, 194, 33, 0.8);',\r\n    },\r\n  })(CircularProgress);\r\n  \r\n\r\n\r\nconst _Spinner = React.memo(()=> {\r\n\r\nreturn <ContainerVerticallyCentered><ColorCircularProgress thickness ={5} size ={100} /></ContainerVerticallyCentered>\r\n\r\n})\r\n\r\nexport const Spinner = withRouter(_Spinner);\r\n\r\n\r\nexport const Button = styled.button`\r\n    display:block;\r\n    animation: fade_in 1s ease-in-out forwards;\r\n    background-color: #759ae9;\r\n    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #759ae9), color-stop(50%, #376fe0), color-stop(50%, #1a5ad9), color-stop(100%, #2463de));\r\n    background-image: -webkit-linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    background-image: -moz-linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    background-image: -ms-linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    background-image: -o-linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    background-image: linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    border-top: 1px solid #1f58cc;\r\n    border-right: 1px solid #1b4db3;\r\n    border-bottom: 1px solid #174299;\r\n    border-left: 1px solid #1b4db3;\r\n    border-radius: 4px;\r\n    -webkit-box-shadow: inset 0 0 2px 0 rgba(57, 140, 255, 0.8);\r\n    box-shadow: inset 0 0 2px 0 rgba(57, 140, 255, 0.8);\r\n    color: #fff;\r\n//     font: bold 12px/1 \"helvetica neue\", helvetica, arial, sans-serif;\r\n    padding: 7px 0;\r\n    text-shadow: 0 -1px 1px #1a5ad9;\r\n    margin 2vh auto 1vh auto;\r\n    height: 40px;\r\n    font-size:1rem;\r\n    width: 150px; }\r\n    &:hover {\r\n      background-color: #5d89e8;\r\n      background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #5d89e8), color-stop(50%, #2261e0), color-stop(50%, #044bd9), color-stop(100%, #0d53de));\r\n      background-image: -webkit-linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      background-image: -moz-linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      background-image: -ms-linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      background-image: -o-linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      background-image: linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      cursor: pointer; }\r\n    &:active {\r\n      border-top: 1px solid #1b4db3;\r\n      border-right: 1px solid #174299;\r\n      border-bottom: 1px solid #133780;\r\n      border-left: 1px solid #174299;\r\n      \r\n      -webkit-box-shadow: inset 0 0 5px 2px #1a47a0, 0 1px 0 #eeeeee;\r\n      box-shadow: inset 0 0 5px 2px #1a47a0, 0 1px 0 #eeeeee; }\r\n    &:focus {outline:none;}\r\n  \r\n`\r\n\r\nconst StyledAlert = withStyles({\r\n  root: {\r\n    background: '#FADC53',\r\n    color: '#f44336',\r\n    margin: '40px auto',\r\n    fontWeight: 'bold',\r\n    maxWidth: '300px',\r\n    boxShadow: 'inset 0 0 5px #1E1F26, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)',\r\n  },\r\n  },\r\n)(Alert);\r\n\r\n\r\nexport const MyAlert = ({visible, message})=> {\r\n  \r\n  return (visible? <StyledAlert severity=\"error\">\r\n                              <AlertTitle>\r\n                                Uwaga!!!\r\n                              </AlertTitle>\r\n                              {message}\r\n                            </ StyledAlert>:null\r\n        );\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({  \r\n  visible: state.validation_alert_visibility,\r\n  message:'Nie wybrano waluty, kryptowaluty albo obu',\r\n});\r\n\r\n\r\nexport const ValidationAlert = connect(mapStateToProps, null)(MyAlert);\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n// const _SearchButton =(props)=>{ \r\n\r\n// const {trigger_alert, send_choice, state_full} = props;\r\n\r\n// if(state_full()){console.log('statefull')} else trigger_alert();\r\n\r\n// return(<Button ID = 'Button' onClick ={state_full}>Pokaż dane</Button> )\r\n\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   trigger_alert: () => dispatch(trigger_alert),\r\n//   send_choice: (choice)=>dispatch(send_choice(choice)),\r\n// });\r\n\r\n// export const SearchButton = connect(null, mapDispatchToProps)(_SearchButton);\r\n","import * as React from 'react';\r\nimport {send_selected_crypto} from '../actions';\r\nimport \"react-virtualized-select/styles.css\";\r\nimport 'react-virtualized/styles.css'\r\nimport 'react-virtualized-select/styles.css'\r\nimport VirtualizedSelect from 'react-virtualized-select'\r\nimport {connect} from'react-redux';\r\n\r\nconst createOption =(ary)=>{const result = {}; result.value = ary[0];result.label = ary[1]; return result;}\r\n\r\nconst _Select = (props)=>{\r\n    \r\n    const {cryptos, selected_crypto, send_selected_crypto} = props;\r\n    const select_options = cryptos.map(createOption);\r\n    \r\n    return(\r\n\r\n        (cryptos && cryptos.length)?<VirtualizedSelect \r\n        value ={selected_crypto}\r\n        closeMenuOnSelect ={false}\r\n        className=\"selector-item virtualized\"\r\n        placeholder = \"Wybierz kryptowalutę\"\r\n        isClearable = {true}\r\n        isSearchable ={true}\r\n        onChange ={(selectValue)=>{send_selected_crypto(selectValue)}}\r\n        options = {select_options} />:null\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cryptos: state.list_of_all_cryptos,\r\n    selected_crypto: state.selected_crypto,\r\n\r\n  });\r\n\r\nconst  mapDispatchToProps = (dispatch) => ({\r\n    send_selected_crypto: (data) => dispatch(send_selected_crypto(data)),\r\n});\r\n\r\nconst MySelect = connect(mapStateToProps, mapDispatchToProps)(_Select);\r\n export default MySelect;","\r\nimport {send_error, send_list_of_all_cryptos, hide_loaded_coins_msg } from '../actions';\r\n\r\nconst linkToListOfAllCryptos = 'https://min-api.cryptocompare.com/data/all/coinlist';\r\n\r\nvar toPairs = require('lodash/toPairs');\r\n\r\n\r\nconst extractListOfCryptos = (obj)=>{\r\n    let data = obj.data.Data; \r\n    for(var item in data){if (data.hasOwnProperty(item)){data[item] = (data[item]).CoinName;}}; \r\n    return toPairs(data);};\r\n  \r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport default function getListOfAvailableCryptos(redirect) {\r\n  return async (dispatch, getState, Axios) => {\r\n    \r\n    const {list_of_all_cryptos_is_loaded} = getState();\r\n    if (!list_of_all_cryptos_is_loaded){\r\n      const response = await Axios.get(linkToListOfAllCryptos).catch((error) => {\r\n        const err = {\r\n          text: 'Podczas próby pobrania listy dostępnych kryptowalut wystąpił błąd',\r\n          code: error.message\r\n        };\r\n        dispatch(send_error(err));\r\n        redirect.error();\r\n      });\r\n    response && (dispatch(send_list_of_all_cryptos(extractListOfCryptos(response))));\r\n    } \r\n    else{dispatch(hide_loaded_coins_msg())}\r\n  };\r\n}\r\n","\r\nimport React from 'react';\r\nimport MySelect from './select';\r\nimport {validate_and_get_historical_data} from '../complexfunctions/validatehistorical';\r\nimport getListOfAvailableCryptos from '../complexfunctions/getlistofcoins';\r\nimport getCurrentCryptoPrice from '../complexfunctions/getcurrentprice';\r\nimport {Container, Button, ValidationAlert} from './details';\r\nimport {useEffect } from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport {connect} from'react-redux';\r\nimport {RadioButtonsGroup}from './radiogroup';\r\nimport { useHistory } from 'react-router-dom';\r\nimport LoadedCoinsMessage from './loadedcoinmessage';\r\n\r\nimport {\r\n  send_error, \r\n  send_current,  \r\n  clear_search_results,\r\n} from '../actions';\r\n\r\nvar Loop;\r\n//do rozważenia przenieść mniej więcej wszystk z clearloop do tego co się wykonuje po mount\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\nconst _Search =(props) =>{\r\n\r\n  const {\r\n    search_results, \r\n    clear_search_results, \r\n    validate_and_get_historical_data,\r\n    getCurrentCryptoPrice, \r\n    getListOfAvailableCryptos} = props;  \r\n\r\n  const clearLoop =()=>{clear_search_results(); clearInterval(Loop)}\r\n\r\n  const history = useHistory();\r\n\r\n  const redirect = React.useMemo(\r\n     () => ({\r\n      not_found: ()=>{history.push('/not_found')},\r\n      error:()=>{history.push('/error')},\r\n      data: ()=>{history.push('/results')},\r\n      connecting:()=>{history.push('/connecting')},\r\n      search:()=>{history.push('/')}\r\n    }),[],\r\n  )\r\n\r\n\r\n\r\n  function return_get_current_price(){return getCurrentCryptoPrice(search_results, redirect)};\r\n  function proceed_validate(){return validate_and_get_historical_data(redirect, clearLoop)};\r\n\r\n  useEffect(()=>{\r\n    \r\n    if (search_results && search_results.length) {\r\n      redirect.connecting();\r\n      clearLoop();\r\n      return_get_current_price();\r\n      Loop = setInterval(return_get_current_price, 5000);\r\n    }\r\n  },[search_results]);\r\n\r\n  \r\n  useEffect(() => {  \r\n    getListOfAvailableCryptos(redirect);\r\n  },[]);\r\n \r\n  return(  \r\n  <Container>\r\n    <Button ID = 'Button' onClick ={proceed_validate}>Pokaż dane</Button>\r\n    <RadioButtonsGroup />\r\n    <MySelect />\r\n    <ValidationAlert />\r\n    <LoadedCoinsMessage />\r\n  </Container>);\r\n\r\n}\r\n\r\nconst  mapDispatchToProps = (dispatch) => ({\r\n  send_error:(data)=> dispatch(send_error(data)),\r\n  send_current: (data)=> dispatch(send_current(data)),\r\n  clear_search_results:()=>dispatch(clear_search_results()),\r\n  validate_and_get_historical_data:(a,b)=>dispatch(validate_and_get_historical_data(a,b)),\r\n  getListOfAvailableCryptos:(x)=>dispatch(getListOfAvailableCryptos(x)),\r\n  getCurrentCryptoPrice:(x,y)=>dispatch(getCurrentCryptoPrice(x,y)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({  \r\n  search_results: state.search_results,\r\n});\r\n\r\nconst Search = withRouter(connect(mapStateToProps, mapDispatchToProps)(_Search));\r\nexport default Search;\r\n","import React from 'react';\r\nimport {connect} from'react-redux';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport {send_base_currency} from '../actions';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst MyFormControl = withStyles({\r\n  root: {\r\n    borderRadius: '2px',\r\n    animation: 'fade_in 1s ease-in-out forwards',\r\n    border: '2px solid #1E1F26',\r\n    padding: '20px',\r\n    width: '300px',\r\n    margin: '2vh 0',\r\n    boxShadow: 'inset 0 0 5px #1E1F26, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)',\r\n    backgroundColor: '#2C303A',\r\n    color: 'white',\r\n    '&:hover':{border: '2px solid #EE760A'}, \r\n    '& .MuiFormLabel-root':{color: 'white',fontFamily: '\"Lato\", sans-serif', paddingBottom: '5px' },\r\n    '& .MuiFormGroup-root':{flexDirection:'row', justifyContent:'space-around',},\r\n    '& .MuiRadio-colorSecondary.Mui-checked':{color: '#EE760A'},\r\n  },\r\n})(FormControl);\r\n\r\n\r\n  const _RadioButtonsGroup =(props)=> {\r\n  \r\n  const{base_currency, send_base_currency} = props;\r\n  const handleChange = (event) => {send_base_currency(event.target.value);};\r\n\r\n  return (\r\n    <MyFormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Waluta odniesienia</FormLabel>\r\n      <RadioGroup aria-label=\"currency\" name=\"currency\" value={base_currency} onChange={handleChange}>\r\n        <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n        <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n        <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n      </RadioGroup>\r\n    </MyFormControl>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({  \r\nbase_currency: state.base_currency,\r\n});\r\n\r\nconst  mapDispatchToProps = (dispatch) => ({\r\n  send_base_currency: (data) => dispatch(send_base_currency(data)),\r\n});\r\n\r\nexport const RadioButtonsGroup = connect(mapStateToProps, mapDispatchToProps)(_RadioButtonsGroup);\r\n","import *as React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Alert} from '@material-ui/lab';\r\nimport { withStyles} from '@material-ui/core/styles';\r\nimport {connect} from'react-redux';\r\nimport {hide_loaded_coins_msg} from '../actions';\r\n\r\n\r\nconst MyAlert = withStyles({\r\n  root: {\r\n    background: 'rgba(122, 194, 33, 0.8);',\r\n    background: '#688B69;',\r\n    color: '#F5F2AA',\r\n    fontSize: '1.25rem',\r\n    border: '1px solid 4d684d',\r\n    boxShadow: 'inset 0 0 5px #298B01',\r\n    boxShadow: 'inset 0 0 5px #4d684d, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)',\r\n  },\r\n})(Alert);\r\n\r\n\r\n\r\nexport const _LoadedCoinsMessage =(props) =>{\r\n\r\n    const {open, close, count} = props;\r\n    \r\nreturn(\r\n<Snackbar open={open} autoHideDuration={6000} onClose={close} >\r\n        <MyAlert  severity=\"success\" variant=\"filled\" >\r\n          Poprawnie pobrano tablicę z dostępnymi kryptowalutami.<br />\r\n          Łącznie znaleziono dane dla {count} kryptowalut.<br />\r\n        </MyAlert>\r\n</Snackbar>)}\r\n\r\n\r\n\r\nconst  mapDispatchToProps = (dispatch) => ({\r\n   \r\n    close:()=> dispatch(hide_loaded_coins_msg()),\r\n    \r\n  });\r\n  \r\n\r\nconst mapStateToProps = (state) => ({\r\n    open: state.list_of_all_cryptos_is_loaded,\r\n    count:[...state.list_of_all_cryptos].length,\r\n\r\n  });\r\n\r\nconst LoadedCoinsMessage = (connect(mapStateToProps, mapDispatchToProps)(_LoadedCoinsMessage)); \r\n\r\nexport default LoadedCoinsMessage;\r\n","import {set_search_results, toggle_validation_alert_visibility, send_historical, send_error, clear_historical } from '../actions';\r\nimport {timestamps, link, createObject} from '../functions';\r\n\r\nexport function validate_and_get_historical_data (redirect, clear){return (dispatch, getState, Axios)=>{ \r\n  \r\n    const { selected_crypto, base_currency } = getState();\r\n    if(selected_crypto && base_currency){\r\n       \r\n        dispatch(toggle_validation_alert_visibility(false));\r\n        dispatch(clear_historical());\r\n        redirect.connecting();\r\n        const ary =[];\r\n        for(let i= 0; i<= timestamps.reducedLength(); i++){\r\n            ary.push( Axios.get(link.historicalPrice(selected_crypto.value, base_currency, timestamps.getValue(i)), link.header))\r\n        }\r\n        const result =[]\r\n        Axios.all(ary).then(responseArr => { \r\n            responseArr.forEach((item, index)=>{\r\n                let partial = item.data[base_currency]? item.data[base_currency]: 'n/a';\r\n                result.push(createObject(timestamps.getKey(index),partial) )\r\n            });\r\n            result.push(clear);\r\n            dispatch(send_historical(result));\r\n            const new_selected_crypto = selected_crypto;\r\n            const new_base_currency = base_currency;\r\n            redirect.search();\r\n            dispatch(set_search_results([new_selected_crypto.value, new_base_currency, new_selected_crypto.label]));\r\n      \r\n        }).catch(error=>{\r\n            redirect.error();\r\n            dispatch(send_error({text: 'Podczas pobierania historycznych danych dla ' + selected_crypto.label + ' wystąpił błąd:', code: error.message}))\r\n        });\r\n  \r\n    } \r\n        else{dispatch(toggle_validation_alert_visibility(true))} \r\n        }\r\n}\r\n    \r\n","\r\nimport {\r\n    send_error, \r\n    send_current,  \r\n  } from '../actions';\r\n\r\n  import {link} from'../functions'; \r\n\r\nexport default function getCurrentCryptoPrice(search_results,redirect) {\r\n    return async (dispatch, getState, Axios)=>{\r\n    const [cryptoID, referenceCoin, text] = search_results;\r\n    const resp = await Axios.get(link.currentPrice(cryptoID, referenceCoin), link.header).catch((error => {\r\n  \r\n      redirect.error();\r\n      dispatch(send_error({\r\n        text: 'Podczas pobierania aktualnej wartości  dla ' + cryptoID + 'wystapił błąd:',\r\n        code: error.message,\r\n      }))\r\n  \r\n      return;\r\n    }));\r\n  \r\n    if (resp && resp.data.Response !== 'Error') {\r\n      const data = [Object.keys(resp.data)[0], Object.values(resp.data)[0], text];\r\n      dispatch(send_current(data));\r\n      redirect.data();\r\n    } else {\r\n      redirect.error();\r\n      dispatch(send_error({\r\n        text: 'Aktualnie pobierana wartość dla ' + cryptoID + ' jest nieprawidłowa',\r\n        code: resp.data.Message\r\n      }))\r\n    }; // w zasadzie to powinno zamykać pętlę, powinien iść duży reset w tym miejscu czyszczący wszystko\r\n  }\r\n} "],"sourceRoot":""}