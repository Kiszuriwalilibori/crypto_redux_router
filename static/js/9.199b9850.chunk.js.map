{"version":3,"sources":["components/details.jsx","components/Choice/CryptoCurrencyChoice.jsx","js/FUNCTIONS/getListOfAvailableCryptos.js","components/Choice/SearchSection.jsx","components/Choice/FailedValidationAlert.jsx","components/Choice/BaseCurrencyChoice.jsx","components/LoadedCoinsMessage.jsx","js/FUNCTIONS/validateAndGetHistoricalData.js","js/FUNCTIONS/getCurrentCryptoPrice.js"],"names":["Container","withStyles","root","margin","display","flexDirection","height","alignItems","background","paddingTop","Box","ContainerVerticallyCentered","justifyContent","CryptoCurrencyContainer","width","paddingRight","paddingLeft","marginRight","marginLeft","ColorCircularProgress","color","CircularProgress","_Spinner","React","thickness","size","Button","withRouter","styled","button","createOption","ary","result","value","label","CryptoCurrencyChoice","connect","state","cryptos","list_of_all_cryptos","selectedCrypto","selected_crypto","dispatch","setSelectedCrypto","data","props","selectOptions","map","length","closeMenuOnSelect","className","placeholder","isClearable","isSearchable","onChange","selectValue","options","toPairs","require","extractListOfCryptos","obj","Data","item","hasOwnProperty","CoinName","Loop","StyledAlert","fontWeight","maxWidth","boxShadow","Alert","FailedValidationAlert","visible","validation_alert_visibility","message","severity","AlertTitle","MyFormControl","borderRadius","animation","border","padding","backgroundColor","fontFamily","paddingBottom","FormControl","BaseCurrencyChoice","baseCurrency","setBaseCurrency","component","FormLabel","RadioGroup","aria-label","name","event","target","FormControlLabel","control","Radio","MyAlert","fontSize","LoadedCoinsMessage","open","isLoadedListOfAllCryptos","count","close","hideLoadedCoinsMessage","Snackbar","autoHideDuration","onClose","variant","SearchSection","searchResults","search_results","reportError","setCurrentPrice","clearSearchResults","validateAndGetHistoricalData","a","b","redirect","clear","getState","Axios","toggleValidationAlertVisibility","clearHistoricalPrices","connecting","i","timestamps","reducedLength","push","get","link","historicalPrice","getValue","header","all","then","responseArr","forEach","index","partial","createObject","getKey","setHistoricalPrices","new_selected_crypto","new_baseCurrency","search","setSearchResults","catch","error","text","code","getListOfAvailableCryptos","x","err","response","setListOfAllCryptos","getCurrentCryptoPrice","y","cryptoID","referenceCoin","currentPrice","resp","Response","Object","keys","values","Message","clearLoop","clearInterval","history","useHistory","useMemo","not_found","useEffect","setInterval","ID","onClick"],"mappings":"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","file":"static/js/9.199b9850.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nexport const Container = withStyles({\r\n  root: {\r\n    margin: \"0 auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    background: \"transparent\",\r\n    paddingTop: \"10vh\",\r\n  },\r\n})(Box);\r\n\r\nexport const ContainerVerticallyCentered = withStyles({\r\n  root: {\r\n    justifyContent: \"center\",\r\n  },\r\n})(Container);\r\n\r\nexport const CryptoCurrencyContainer = withStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"15px\",\r\n    marginRight: \"auto\",\r\n    marginLeft: \"auto\",\r\n  },\r\n})(Box);\r\n\r\nconst ColorCircularProgress = withStyles({\r\n  root: {\r\n    color: \"rgba(122, 194, 33, 0.8);\",\r\n  },\r\n})(CircularProgress);\r\n\r\nconst _Spinner = React.memo(() => {\r\n  return (\r\n    <ContainerVerticallyCentered>\r\n      <ColorCircularProgress thickness={5} size={100} />\r\n    </ContainerVerticallyCentered>\r\n  );\r\n});\r\n\r\nexport const Spinner = withRouter(_Spinner);\r\n\r\nexport const Button = styled.button`\r\n    display:block;\r\n    animation: fade_in 1s ease-in-out forwards;\r\n    background-color: #759ae9;\r\n    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #759ae9), color-stop(50%, #376fe0), color-stop(50%, #1a5ad9), color-stop(100%, #2463de));\r\n    background-image: -webkit-linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    background-image: -moz-linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    background-image: -ms-linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    background-image: -o-linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    background-image: linear-gradient(top, #759ae9 0%, #376fe0 50%, #1a5ad9 50%, #2463de 100%);\r\n    border-top: 1px solid #1f58cc;\r\n    border-right: 1px solid #1b4db3;\r\n    border-bottom: 1px solid #174299;\r\n    border-left: 1px solid #1b4db3;\r\n    border-radius: 4px;\r\n    -webkit-box-shadow: inset 0 0 2px 0 rgba(57, 140, 255, 0.8);\r\n    box-shadow: inset 0 0 2px 0 rgba(57, 140, 255, 0.8);\r\n    color: #fff;\r\n//     font: bold 12px/1 \"helvetica neue\", helvetica, arial, sans-serif;\r\n    padding: 7px 0;\r\n    text-shadow: 0 -1px 1px #1a5ad9;\r\n    margin 2vh auto 1vh auto;\r\n    height: 40px;\r\n    font-size:1rem;\r\n    width: 150px; }\r\n    &:hover {\r\n      background-color: #5d89e8;\r\n      background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #5d89e8), color-stop(50%, #2261e0), color-stop(50%, #044bd9), color-stop(100%, #0d53de));\r\n      background-image: -webkit-linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      background-image: -moz-linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      background-image: -ms-linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      background-image: -o-linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      background-image: linear-gradient(top, #5d89e8 0%, #2261e0 50%, #044bd9 50%, #0d53de 100%);\r\n      cursor: pointer; }\r\n    &:active {\r\n      border-top: 1px solid #1b4db3;\r\n      border-right: 1px solid #174299;\r\n      border-bottom: 1px solid #133780;\r\n      border-left: 1px solid #174299;\r\n      \r\n      -webkit-box-shadow: inset 0 0 5px 2px #1a47a0, 0 1px 0 #eeeeee;\r\n      box-shadow: inset 0 0 5px 2px #1a47a0, 0 1px 0 #eeeeee; }\r\n    &:focus {outline:none;}\r\n  \r\n`;\r\n","import * as React from 'react';\r\nimport {setSelectedCrypto} from '../../js/ACTIONS/actions';\r\nimport \"react-virtualized-select/styles.css\";\r\nimport 'react-virtualized/styles.css'\r\nimport 'react-virtualized-select/styles.css'\r\nimport VirtualizedSelect from 'react-virtualized-select'\r\nimport {connect} from'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst createOption =(ary)=>{const result = {}; result.value = ary[0];result.label = ary[1]; return result;}\r\n\r\nconst prepareCryptoCurrencyChoice = (props)=>{\r\n    \r\n    const {cryptos, selectedCrypto, setSelectedCrypto} = props;\r\n    const selectOptions = cryptos.map(createOption);\r\n    \r\n    return(\r\n\r\n        (cryptos && cryptos.length)?<VirtualizedSelect \r\n        value ={selectedCrypto}\r\n        closeMenuOnSelect ={false}\r\n        className=\"selector-item virtualized\"\r\n        placeholder = \"Wybierz kryptowalutę\"\r\n        isClearable = {true}\r\n        isSearchable ={true}\r\n        onChange ={(selectValue)=>{setSelectedCrypto(selectValue)}}\r\n        options = {selectOptions} />:null\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cryptos: state.list_of_all_cryptos,\r\n    selectedCrypto: state.selected_crypto,\r\n\r\n  });\r\n\r\nconst  mapDispatchToProps = (dispatch) => ({\r\n    setSelectedCrypto: (data) => dispatch(setSelectedCrypto(data)),\r\n});\r\n\r\nconst CryptoCurrencyChoice = connect(mapStateToProps, mapDispatchToProps)(prepareCryptoCurrencyChoice);\r\nexport default CryptoCurrencyChoice;\r\n\r\nprepareCryptoCurrencyChoice.propTypes ={\r\n    cryptos:PropTypes.array,\r\n    selectedCrypto:PropTypes.object,\r\n    setSelectedCrypto:PropTypes.func\r\n}","\r\nimport {reportError, setListOfAllCryptos, hideLoadedCoinsMessage } from '../ACTIONS/actions';\r\n\r\nconst linkToListOfAllCryptos = 'https://min-api.cryptocompare.com/data/all/coinlist';\r\n\r\nvar toPairs = require('lodash/toPairs');\r\n\r\nconst extractListOfCryptos = (obj)=>{\r\n    let data = obj.data.Data; \r\n    for(var item in data){if (data.hasOwnProperty(item)){data[item] = (data[item]).CoinName;}}; \r\n    return toPairs(data);};\r\n  \r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport default function getListOfAvailableCryptos(redirect) {\r\n  return async (dispatch, getState, Axios) => {\r\n    \r\n    const {isLoadedListOfAllCryptos} = getState();\r\n    if (!isLoadedListOfAllCryptos){\r\n      const response = await Axios.get(linkToListOfAllCryptos).catch((error) => {\r\n        const err = {\r\n          text: 'Podczas próby pobrania listy dostępnych kryptowalut wystąpił błąd',\r\n          code: error.message\r\n        };\r\n        dispatch(reportError(err));\r\n        redirect.error();\r\n      });\r\n    response && (dispatch(setListOfAllCryptos(extractListOfCryptos(response))));\r\n    } \r\n    else{dispatch(hideLoadedCoinsMessage())}\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport CryptoCurrencyChoice from \"./CryptoCurrencyChoice\";\r\nimport { validateAndGetHistoricalData } from \"../../js/FUNCTIONS/validateAndGetHistoricalData\";\r\nimport getListOfAvailableCryptos from \"../../js/FUNCTIONS/getListOfAvailableCryptos\";\r\nimport getCurrentCryptoPrice from \"../../js/FUNCTIONS/getCurrentCryptoPrice\";\r\nimport { Container, Button } from \"../details\";\r\nimport FailedValidationAlert from \"./FailedValidationAlert\";\r\nimport { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { BaseCurrencyChoice } from \"./BaseCurrencyChoice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LoadedCoinsMessage from \"../LoadedCoinsMessage\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  reportError,\r\n  setCurrentPrice,\r\n  clearSearchResults,\r\n} from \"../../js/ACTIONS/actions\";\r\n\r\nvar Loop;\r\n//do rozważenia przenieść mniej więcej wszystk z clearloop do tego co się wykonuje po mount\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\nconst UnconnectedSearchSection = (props) => {\r\n  const {\r\n    searchResults,\r\n    clearSearchResults,\r\n    validateAndGetHistoricalData,\r\n    getCurrentCryptoPrice,\r\n    getListOfAvailableCryptos,\r\n  } = props;\r\n\r\n  const clearLoop = () => {\r\n    clearSearchResults();\r\n    clearInterval(Loop);\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  const redirect = React.useMemo(\r\n    () => ({\r\n      not_found: () => {\r\n        history.push(\"/not_found\");\r\n      },\r\n      error: () => {\r\n        history.push(\"/error\");\r\n      },\r\n      data: () => {\r\n        history.push(\"/results\");\r\n      },\r\n      connecting: () => {\r\n        history.push(\"/connecting\");\r\n      },\r\n      search: () => {\r\n        history.push(\"/\");\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  function currentPrice() {\r\n    return getCurrentCryptoPrice(searchResults, redirect);\r\n  }\r\n     \r\n\r\n  function validateAndStartReadingHistoricalValues() {\r\n    return validateAndGetHistoricalData(redirect, clearLoop);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (searchResults && searchResults.length) {\r\n      redirect.connecting();\r\n      clearLoop();\r\n      currentPrice()\r\n      Loop = setInterval(currentPrice, 5000);\r\n    }\r\n  }, [searchResults]);\r\n\r\n  useEffect(() => {\r\n    getListOfAvailableCryptos(redirect);\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Button ID=\"Button\" onClick={validateAndStartReadingHistoricalValues}>\r\n        Pokaż dane\r\n      </Button>\r\n      <BaseCurrencyChoice />\r\n      <CryptoCurrencyChoice />\r\n      <FailedValidationAlert />\r\n      <LoadedCoinsMessage />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  reportError: (data) => dispatch(reportError(data)),\r\n  setCurrentPrice: (data) => dispatch(setCurrentPrice(data)),\r\n  clearSearchResults: () => dispatch(clearSearchResults()),\r\n  validateAndGetHistoricalData: (a, b) => dispatch(validateAndGetHistoricalData(a, b)),\r\n  getListOfAvailableCryptos: (x) => dispatch(getListOfAvailableCryptos(x)),\r\n  getCurrentCryptoPrice: (x, y) => dispatch(getCurrentCryptoPrice(x, y)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchResults: state.search_results,\r\n});\r\n\r\nconst SearchSection = withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(UnconnectedSearchSection)\r\n);\r\nexport default SearchSection;\r\n\r\nUnconnectedSearchSection.propTypes = {\r\n  searchResults:PropTypes.array,\r\n  clearSearchResults:PropTypes.func,\r\n  validateAndGetHistoricalData:PropTypes.func,\r\n  getCurrentCryptoPrice:PropTypes.func,\r\n  getListOfAvailableCryptos:PropTypes.func\r\n}\r\n","import * as React from 'react';\r\nimport {connect} from'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StyledAlert = withStyles({\r\n    root: {\r\n      background: '#FADC53',\r\n      color: '#f44336',\r\n      margin: '40px auto',\r\n      fontWeight: 'bold',\r\n      maxWidth: '300px',\r\n      boxShadow: 'inset 0 0 5px #1E1F26, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)',\r\n    },\r\n},)(Alert);\r\n \r\nconst prepareFailedValidationAlert = ({visible, message})=> {\r\n    \r\n  return (visible? <StyledAlert severity=\"error\"><AlertTitle>Uwaga!!!</AlertTitle>{message}</ StyledAlert>:null);\r\n}\r\n  \r\nlet mapStateToProps = (state) => ({  \r\n  visible: state.validation_alert_visibility,\r\n  message:'Nie wybrano waluty, kryptowaluty albo obu',\r\n});\r\n\r\nconst FailedValidationAlert = connect(mapStateToProps, null)(prepareFailedValidationAlert);\r\nexport default FailedValidationAlert;\r\n\r\nprepareFailedValidationAlert.propTypes ={\r\n  visible: PropTypes.bool,\r\n  message: PropTypes.string\r\n}","import React from 'react';\r\nimport {connect} from'react-redux';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport {setBaseCurrency} from '../../js/ACTIONS/actions';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst MyFormControl = withStyles({\r\n  root: {\r\n    borderRadius: '2px',\r\n    animation: 'fade_in 1s ease-in-out forwards',\r\n    border: '2px solid #1E1F26',\r\n    padding: '20px',\r\n    width: '300px',\r\n    margin: '2vh 0',\r\n    boxShadow: 'inset 0 0 5px #1E1F26, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)',\r\n    backgroundColor: '#2C303A',\r\n    color: 'white',\r\n    '&:hover':{border: '2px solid #EE760A'}, \r\n    '& .MuiFormLabel-root':{color: 'white',fontFamily: '\"Lato\", sans-serif', paddingBottom: '5px' },\r\n    '& .MuiFormGroup-root':{flexDirection:'row', justifyContent:'space-around',},\r\n    '& .MuiRadio-colorSecondary.Mui-checked':{color: '#EE760A'},\r\n  },\r\n})(FormControl);\r\n\r\n\r\n  const prepareRadioButtonsGroup =(props)=> {\r\n  \r\n  const{baseCurrency, setBaseCurrency} = props;\r\n  const handleChange = (event) => {setBaseCurrency(event.target.value);};\r\n\r\n  return (\r\n    <MyFormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Waluta odniesienia</FormLabel>\r\n      <RadioGroup aria-label=\"currency\" name=\"currency\" value={baseCurrency} onChange={handleChange}>\r\n        <FormControlLabel value=\"PLN\" control={<Radio />} label=\"PLN\" />\r\n        <FormControlLabel value=\"USD\" control={<Radio />} label=\"USD\" />\r\n        <FormControlLabel value=\"EUR\" control={<Radio />} label=\"EUR\" />\r\n      </RadioGroup>\r\n    </MyFormControl>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({  \r\nbaseCurrency: state.baseCurrency,\r\n});\r\n\r\nconst  mapDispatchToProps = (dispatch) => ({\r\n  setBaseCurrency: (data) => dispatch(setBaseCurrency(data)),\r\n});\r\n\r\nexport const BaseCurrencyChoice = connect(mapStateToProps, mapDispatchToProps)(prepareRadioButtonsGroup);\r\n\r\nprepareRadioButtonsGroup.propTypes ={\r\nbaseCurrency:PropTypes.string,\r\nsetBaseCurrency:PropTypes.func\r\n}","import * as React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { hideLoadedCoinsMessage } from \"../js/ACTIONS/actions\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MyAlert = withStyles({\r\n  root: {\r\n    background: \"#688B69;\",\r\n    color: \"#F5F2AA\",\r\n    fontSize: \"1.25rem\",\r\n    border: \"1px solid 4d684d\",\r\n    boxShadow:\r\n      \"inset 0 0 5px #4d684d, 0 1px 2px rgba(0,0,0,0.07), 0 2px 4px rgba(0,0,0,0.07), 0 4px 8px rgba(0,0,0,0.07), 0 8px 16px rgba(0,0,0,0.07), 0 16px 32px rgba(0,0,0,0.07), 0 32px 64px rgba(0,0,0,0.07)\",\r\n  },\r\n})(Alert);\r\n\r\nexport const prepareLoadedCoinsMessage = (props) => {\r\n  const { open, close, count } = props;\r\n\r\n  return (\r\n    <Snackbar open={open} autoHideDuration={6000} onClose={close}>\r\n      <MyAlert severity=\"success\" variant=\"filled\">\r\n        Poprawnie pobrano tablicę z dostępnymi kryptowalutami.\r\n        <br />\r\n        Łącznie znaleziono dane dla {count} kryptowalut.\r\n        <br />\r\n      </MyAlert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  close: () => dispatch(hideLoadedCoinsMessage()),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  open: state.isLoadedListOfAllCryptos,\r\n  count: [...state.list_of_all_cryptos].length,\r\n});\r\n\r\nconst LoadedCoinsMessage = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(prepareLoadedCoinsMessage);\r\n\r\nexport default LoadedCoinsMessage;\r\n\r\nprepareLoadedCoinsMessage.propTypes ={\r\n  open:PropTypes.bool,\r\n  count:PropTypes.number,\r\n  close:PropTypes.func\r\n}","import {\r\n  setSearchResults,\r\n  toggleValidationAlertVisibility,\r\n  setHistoricalPrices,\r\n  reportError,\r\n  clearHistoricalPrices,\r\n} from \"../ACTIONS/actions\";\r\nimport { timestamps, link, createObject } from \"./functions\";\r\n\r\nexport function validateAndGetHistoricalData(redirect, clear) {\r\n  return (dispatch, getState, Axios) => {\r\n    const { selected_crypto, baseCurrency } = getState();\r\n    if (selected_crypto && baseCurrency) {\r\n      dispatch(toggleValidationAlertVisibility(false));\r\n      dispatch(clearHistoricalPrices());\r\n      redirect.connecting();\r\n      const ary = [];\r\n      for (let i = 0; i <= timestamps.reducedLength(); i++) {\r\n        ary.push(\r\n          Axios.get(\r\n            link.historicalPrice(\r\n              selected_crypto.value,\r\n              baseCurrency,\r\n              timestamps.getValue(i)\r\n            ),\r\n            link.header\r\n          )\r\n        );\r\n      }\r\n      const result = [];\r\n      Axios.all(ary)\r\n        .then((responseArr) => {\r\n          responseArr.forEach((item, index) => {\r\n            let partial = item.data[baseCurrency]\r\n              ? item.data[baseCurrency]\r\n              : \"n/a\";\r\n            result.push(createObject(timestamps.getKey(index), partial));\r\n          });\r\n          result.push(clear);\r\n          dispatch(setHistoricalPrices(result));\r\n          const new_selected_crypto = selected_crypto;\r\n          const new_baseCurrency = baseCurrency;\r\n          redirect.search();\r\n          dispatch(\r\n            setSearchResults([\r\n              new_selected_crypto.value,\r\n              new_baseCurrency,\r\n              new_selected_crypto.label,\r\n            ])\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          redirect.error();\r\n          dispatch(\r\n            reportError({\r\n              text:\r\n                \"Podczas pobierania historycznych danych dla \" +\r\n                selected_crypto.label +\r\n                \" wystąpił błąd:\",\r\n              code: error.message,\r\n            })\r\n          );\r\n        });\r\n    } else {\r\n      dispatch(toggleValidationAlertVisibility(true));\r\n    }\r\n  };\r\n}\r\n","import { reportError, setCurrentPrice } from \"../ACTIONS/actions\";\r\n\r\nimport { link } from \"./functions\";\r\n\r\nexport default function getCurrentCryptoPrice(search_results, redirect) {\r\n  return async (dispatch, getState, Axios) => {\r\n    const [cryptoID, referenceCoin, text] = search_results;\r\n    const resp = await Axios.get(\r\n      link.currentPrice(cryptoID, referenceCoin),\r\n      link.header\r\n    ).catch((error) => {\r\n      redirect.error();\r\n      dispatch(\r\n        reportError({\r\n          text:\r\n            \"Podczas pobierania aktualnej wartości  dla \" +\r\n            cryptoID +\r\n            \"wystapił błąd:\",\r\n          code: error.message,\r\n        })\r\n      );\r\n\r\n      return;\r\n    });\r\n\r\n    if (resp && resp.data.Response !== \"Error\") {\r\n      const data = [\r\n        Object.keys(resp.data)[0],\r\n        Object.values(resp.data)[0],\r\n        text,\r\n      ];\r\n      dispatch(setCurrentPrice(data));\r\n      redirect.data();\r\n    } else {\r\n      redirect.error();\r\n      dispatch(\r\n        reportError({\r\n          text:\r\n            \"Aktualnie pobierana wartość dla \" +\r\n            cryptoID +\r\n            \" jest nieprawidłowa\",\r\n          code: resp.data.Message,\r\n        })\r\n      )\r\n    } \r\n  };\r\n}\r\n"],"sourceRoot":""}