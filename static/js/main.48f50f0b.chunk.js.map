{"version":3,"sources":["redux/reducer&actions.js","js/fixtures.js","components/EmptyLoader.jsx","components/App.jsx","js/serviceWorker.js","index.js"],"names":["toPairs","require","getPercentChange","current","historical","arguments","result","change","change_string","toLocaleString","useGrouping","minimumFractionDigits","maximumFractionDigits","CryptoCurrencyData","data","complement","newData","push","format","text","referenceCoin","x","output","testValue","callback","map","element","Object","keys","key","value","values","createObject","formattedCurrent","toString","length","toExponential","formatResult","currentPrice","this","link","coin","reference","Apikey","timestamp","pair","timestamps","content","getUnixTime","endOfYesterday","subMonths","Date","startOfYear","reducedLength","getValue","i","getKey","extractListOfCryptos","obj","Data","item","hasOwnProperty","CoinName","sendListOfAllCryptos","createAction","sendError","sendBaseCurrency","sendSelectedCrypto","clearSelections","clearHistorical","sendCurrent","setSearchResults","hideLoadedCoinMessage","toggleValidationAlert","clearSearchResults","sendHistorical","hidePriceHasChangedSnackbar","reducer","createReducer","listOfAllCryptos","isLoadedListOfAllCryptos","lenghtOfListOfAllCryptos","error","isValidationAlertVisibile","alert_message","choice","currentCryptoName","currentCryptoValue","isHistoricalDataReceived","baseCurrency","selectedCrypto","searchResults","priceHasChanged","isVisiblePriceChangedSnackbar","builder","addCase","state","action","payload","cryptoData","getData","shift","currentCryptoID","clear","pop","addDefaultCase","validateAndGetHistoricalData","redirect","dispatch","getState","Axios","connecting","ary","get","all","then","responseArr","forEach","index","partial","newSelectedCrypto","newBaseCurrency","search","label","catch","code","message","getCurrentCryptoPrice","results","a","cryptoID","resp","Response","Message","getListOfAvailableCryptos","err","response","EmptyLoader","Results","lazy","ErrorMessage","SearchSection","Loader","App","basename","process","exact","path","fallback","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","withExtraArgument","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.48f50f0b.chunk.js","sourcesContent":["import subMonths from 'date-fns/subMonths';\r\nimport getUnixTime from 'date-fns/getUnixTime';\r\nimport endOfYesterday from 'date-fns/endOfYesterday';\r\nimport startOfYear from 'date-fns/startOfYear';\r\nimport { createAction, createReducer } from \"@reduxjs/toolkit\";\r\nimport { linkToListOfAllCryptos } from '../js/fixtures';\r\n\r\n// UTILS ///////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nvar toPairs = require(\"lodash/toPairs\");\r\n\r\nfunction getPercentChange (current, historical){\r\n\r\n  if (arguments[0] && arguments[1] && (typeof arguments[1] === 'number') && (typeof arguments[0] === 'number')){\r\n  let result;\r\n  \r\n  let change = 100*(current-historical)/historical;\r\n  const change_string = change.toLocaleString('pl-PL',{ \r\n      useGrouping:'true', \r\n      minimumFractionDigits:\"2\", \r\n      maximumFractionDigits:'2',\r\n  \r\n    });\r\n   \r\n    if (change === 0) result = 'no change';\r\n    else if (change > 0) result = `+${change_string}%`;\r\n    else if (change < 0) result = `${change_string}%`;\r\n  return result;\r\n  }\r\n  else return 'n/a';\r\n}\r\n  \r\n\r\n\r\nfunction formatResult(output, testValue, current, callback, referenceCoin) {\r\n\r\n  const result = output.map(element => {\r\n    if (Object.keys(element)[0] !== testValue) {\r\n      const key = Object.keys(element)[0];\r\n      let value = Object.values(element)[0];\r\n      element = createObject(key, callback(current, value));\r\n\r\n      return element;\r\n    } else {\r\n      const formattedCurrent =  (current.toString().length > 10)? current.toExponential(2): current.toString();\r\n      const value = formattedCurrent+ ' '+ referenceCoin;\r\n      element =createObject(testValue, value);\r\n      return element;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nconst CryptoCurrencyData = class {\r\n  constructor(data) {\r\n    this.data = [data];\r\n    this.currentPrice = Object.values(data)[0];\r\n  }\r\n\r\n  complement = (newData) => {\r\n    this.data.push(...newData);\r\n  };\r\n\r\n  format = (text, referenceCoin) => {\r\n    const x = formatResult(\r\n      this.data,\r\n      text,\r\n      this.currentPrice,\r\n      getPercentChange,\r\n      referenceCoin\r\n    );\r\n    this.data = x;\r\n  };\r\n\r\n  get getData() {\r\n    return this.data;\r\n  }\r\n};\r\n\r\nexport const link = {\r\n  extractCoinList: obj => {\r\n    let data = obj.data.Data;\r\n    for (var item in data) {\r\n      if (data.hasOwnProperty(item)) {\r\n        data[item] = data[item].CoinName;\r\n      }\r\n    }\r\n    return toPairs(data);\r\n  },\r\n  currentPrice: (coin, reference) => \"https://min-api.cryptocompare.com/data/price?fsym=\" + coin + \"&tsyms=\" + reference,\r\n  header: { Apikey: \"feca5a4838bd3042b5340fb60de7c44aadd2d20a178514c44947c3736be3558e\" },\r\n  historicalPrice: (coin, reference, timestamp) => \"https://min-api.cryptocompare.com/data/dayAvg?fsym=\" + coin + \"&tsym=\" + reference + \"&toTs=\" + timestamp + \"&avgType=MidHighLow&tryConversion=true&extraParams=your_app_name\",\r\n  currentPriceText: \"Aktualna Cena\",\r\n};\r\n\r\nfunction createObject(key, value) {\r\n  const pair = {};\r\n  pair[key] = value;\r\n  return pair;\r\n}\r\n\r\nconst timestamps ={\r\n  content:[\r\n    ['1D',()=> getUnixTime(endOfYesterday())],\r\n    ['1M',()=> getUnixTime(subMonths(new Date(), 1))],\r\n    ['5M',()=> getUnixTime(subMonths(new Date(), 3))],\r\n    ['12M',()=> getUnixTime(subMonths(new Date(), 12))],\r\n    ['30M',()=> getUnixTime(subMonths(new Date(), 30))],\r\n    ['YTD',()=> getUnixTime(startOfYear(new Date()))],\r\n  ],\r\n  reducedLength: function(){return this.content.length -1;},\r\n  getValue: function(i){return (this.content[i][1])();},\r\n  getKey: function(i){return this.content[i][0]},\r\n  }\r\n\r\n\r\n  const extractListOfCryptos = (obj)=>{\r\n    let data = obj.data.Data; \r\n    for(var item in data){if (data.hasOwnProperty(item)){data[item] = (data[item]).CoinName;}}; \r\n    return toPairs(data);};\r\n    \r\n\r\n// ACTIONS //////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const sendListOfAllCryptos = createAction(\"SEND_LIST_OF_ALL_CRYPTOS\");\r\nexport const sendError = createAction(\"SEND_ERROR\");\r\nexport const sendBaseCurrency = createAction(\"SEND_BASE_CURRENCY\");\r\nexport const sendSelectedCrypto = createAction(\"SEND_SELECTED_CRYPTO\");\r\nexport const clearSelections = createAction(\"CLEAR_SELECTIONS\");\r\nexport const clearHistorical = createAction(\"CLEAR_HISTORICAL\");\r\nexport const sendCurrent = createAction(\"SEND_CURRENT\");\r\nexport const setSearchResults = createAction(\"SET_SEARCH_RESULTS\");\r\nexport const hideLoadedCoinMessage = createAction(\"HIDE_LOADED_COINS_MSG\");\r\nexport const toggleValidationAlert = createAction(\"TOGGLE_VALIDATION_ALERT_VISIBILITY\");\r\nexport const clearSearchResults = createAction(\"CLEAR_SEARCH_RESULTS\");\r\nexport const sendHistorical = createAction(\"SEND_HISTORICAL\");\r\nexport const hidePriceHasChangedSnackbar = createAction(\"HIDE_PRICE_HAS_CHANGED_SNACKBAR\");\r\n\r\n// REDUCER ////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nconst initialState = {\r\n  listOfAllCryptos: [],\r\n  isLoadedListOfAllCryptos: false,\r\n  lenghtOfListOfAllCryptos: 0,\r\n  error: null,\r\n  isValidationAlertVisibile: false,\r\n  alert_message: \"\",\r\n  choice: \"\",\r\n  currentCryptoName: null,\r\n  currentCryptoValue: null,\r\n  content: [],\r\n  isHistoricalDataReceived: false,\r\n  baseCurrency: null,\r\n  selectedCrypto: null,\r\n  searchResults: [],\r\n  priceHasChanged:false,\r\n  isVisiblePriceChangedSnackbar:false,\r\n\r\n};\r\n\r\nexport const reducer = createReducer(initialState, builder => {\r\n  builder\r\n    .addCase(sendListOfAllCryptos, (state, action) => {\r\n      state.listOfAllCryptos = action.payload;\r\n      state.isLoadedListOfAllCryptos = true;\r\n      state.lenghtOfListOfAllCryptos = action.payload.length;\r\n    })\r\n    .addCase(sendError, (state, action) => {\r\n      state.error = action.payload;\r\n    })\r\n    .addCase(sendBaseCurrency, (state, action) => {\r\n      state.baseCurrency = action.payload;\r\n    })\r\n    .addCase(sendSelectedCrypto, (state, action) => {\r\n      state.selectedCrypto = action.payload;\r\n    })\r\n    .addCase(clearSelections, state => {\r\n      state.selectedCrypto = null;\r\n      state.baseCurrency = null;\r\n    })\r\n    .addCase(clearHistorical, state => {\r\n      state.isHistoricalDataReceived = false;\r\n      state.historical = null;\r\n    })\r\n    .addCase(sendCurrent, (state, action) => {\r\n      state.isVisiblePriceChangedSnackbar = true;\r\n      if (state.currentCryptoValue === null || state.currentCryptoValue !== action.payload[1]) \r\n      {\r\n        const cryptoData = new CryptoCurrencyData(createObject(link.currentPriceText, action.payload[1]));\r\n        cryptoData.complement([...state.historical]);\r\n        cryptoData.format(link.currentPriceText, action.payload[0]);\r\n        const content = cryptoData.getData;\r\n        const currentPrice = content.shift();\r\n        state.currentCryptoValue = action.payload[1];\r\n        state.currentCryptoID = action.payload[0];\r\n        state.content = content;\r\n        state.currentCryptoName = action.payload[2];\r\n        state.currentPrice = currentPrice;\r\n        state.priceHasChanged = true;\r\n      } else {\r\n        state.priceHasChanged = false;\r\n      }\r\n    })\r\n    .addCase(setSearchResults, (state, action) => {\r\n      state.searchResults = [...action.payload];\r\n    })\r\n    .addCase(hideLoadedCoinMessage, (state, action) => {\r\n      state.isLoadedListOfAllCryptos = action.payload;\r\n    })\r\n    .addCase(toggleValidationAlert, (state, action) => {\r\n      state.isValidationAlertVisibile = action.payload;\r\n    })\r\n    .addCase(clearSearchResults, (state, action) => {\r\n      state.searchResults = null;\r\n    })\r\n    .addCase(sendHistorical, (state, action) => {\r\n      const clear = action.payload.pop();\r\n      state.historical = action.payload;\r\n      state.clear = clear;\r\n      state.isHistoricalDataReceived = true;\r\n    })\r\n    .addCase(hidePriceHasChangedSnackbar,(state, action)=>{\r\n      state.isVisiblePriceChangedSnackbar = false;\r\n    })\r\n    .addDefaultCase(() => {});\r\n});\r\n\r\nexport default reducer;\r\n\r\n// THUNKS /////////////////////////////////////////////////////////////////////////\r\n\r\nexport function validateAndGetHistoricalData(redirect, clear) {\r\n  return (dispatch, getState, Axios) => {\r\n    const { selectedCrypto, baseCurrency } = getState();\r\n    if (selectedCrypto && baseCurrency) {\r\n     \r\n      dispatch(toggleValidationAlert(false));\r\n      dispatch(clearHistorical());\r\n      redirect.connecting();\r\n      const ary = [];\r\n      for (let i = 0; i <= timestamps.reducedLength(); i++) {\r\n        ary.push(\r\n          Axios.get(\r\n            link.historicalPrice(\r\n              selectedCrypto.value,\r\n              baseCurrency,\r\n              timestamps.getValue(i)\r\n            ),\r\n            link.header\r\n          )\r\n        );\r\n      }\r\n      const result = [];\r\n      Axios.all(ary)\r\n        .then((responseArr) => {\r\n          responseArr.forEach((item, index) => {\r\n            let partial = item.data[baseCurrency]\r\n              ? item.data[baseCurrency]\r\n              : \"n/a\";\r\n            result.push(createObject(timestamps.getKey(index), partial));\r\n          });\r\n          result.push(clear);\r\n          dispatch(sendHistorical(result));\r\n        \r\n          const newSelectedCrypto = selectedCrypto;\r\n          const newBaseCurrency = baseCurrency;\r\n          redirect.search();\r\n          dispatch(\r\n            setSearchResults([\r\n              newSelectedCrypto.value,\r\n              newBaseCurrency,\r\n              newSelectedCrypto.label,\r\n            ])\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          \r\n          redirect.error();\r\n          dispatch(\r\n            sendError({\r\n              text:\r\n                \"Podczas pobierania historycznych danych dla \" +\r\n                selectedCrypto.label +\r\n                \" wystąpił błąd:\",\r\n              code: error.message,\r\n            })\r\n          );\r\n        });\r\n    } else {\r\n      dispatch(toggleValidationAlert(true));\r\n    }\r\n  };\r\n}\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport function getCurrentCryptoPrice(results, redirect, clear) {\r\n  return async (dispatch, getState, Axios) => {\r\n    const [cryptoID, referenceCoin, text] = results;\r\n    const resp = await Axios.get(\r\n      link.currentPrice(cryptoID, referenceCoin),\r\n      link.header\r\n    ).catch((error) => {\r\n     \r\n      redirect.error();\r\n      dispatch(\r\n        sendError({\r\n          text:\r\n            \"Podczas pobierania aktualnej wartości  dla \" +\r\n            cryptoID +\r\n            \"wystapił błąd:\",\r\n          code: error.message,\r\n        })\r\n      );\r\n\r\n      return;\r\n    });\r\n\r\n    if (resp && resp.data.Response !== \"Error\") {\r\n     \r\n      const data = [\r\n        Object.keys(resp.data)[0],\r\n        Object.values(resp.data)[0],\r\n        text,\r\n      ];\r\n      dispatch(sendCurrent(data));\r\n      redirect.data();\r\n    } else {\r\n      redirect.error();\r\n      clear();\r\n      dispatch(\r\n        sendError({\r\n          text:\r\n            \"Aktualnie pobierana wartość dla \" +\r\n            cryptoID +\r\n            \" jest nieprawidłowa\",\r\n          code: resp.data.Message,\r\n        })\r\n      );\r\n    } \r\n  };\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport function getListOfAvailableCryptos(redirect) {\r\n  return async (dispatch, getState, Axios) => {\r\n   \r\n    const {isLoadedListOfAllCryptos} = getState();\r\n    if (!isLoadedListOfAllCryptos){\r\n      const response = await Axios.get(linkToListOfAllCryptos).catch((error) => {\r\n        const err = {\r\n          text: 'Podczas próby pobrania listy dostępnych kryptowalut wystąpił błąd',\r\n          code: error.message\r\n        };\r\n        dispatch(sendError(err));\r\n        redirect.error();\r\n      });\r\n    response && (dispatch(sendListOfAllCryptos(extractListOfCryptos(response))));\r\n    } \r\n    else{dispatch(hideLoadedCoinMessage())}\r\n  };\r\n}\r\n\r\n\r\n\r\n","let test = {eth:'Ethereum Classic combined\\nwith Zcash', fnd:'Ethereum foundation',alt:'Altcoins - hightest growth', inv: 'INWESTUJ'}\r\n    export default test;\r\nexport const linkToListOfAllCryptos = 'https://min-api.cryptocompare.com/data/all/coinlist';    ","\r\nimport React from 'react';\r\nconst EmptyLoader = () => <div></div>;\r\nexport default EmptyLoader;","import * as React from \"react\";\nimport { lazy, Suspense } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport EmptyLoader from \"./EmptyLoader\";\n\nconst Results = lazy(() => import(\"./Results/Results\"));\nconst ErrorMessage = lazy(() => import(\"./ErrorMessage\"));\nconst SearchSection = lazy(() => import(\"./Choice/SearchSection\"));\nconst Loader = lazy(() => import(\"./Loader\"));\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <Suspense fallback={EmptyLoader()}>\n            <SearchSection />\n          </Suspense>\n        </Route>\n        <Route path=\"/results\">\n          <Suspense fallback={EmptyLoader()}>\n            <Results />\n          </Suspense>\n        </Route>\n        <Route path=\"/connecting\">\n          <Suspense fallback={EmptyLoader()}>\n            <Loader />\n          </Suspense>\n        </Route>\n        <Route path=\"/error\">\n          <Suspense fallback={EmptyLoader()}>\n            <ErrorMessage />\n          </Suspense>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./redux/reducer&actions\";\nimport Axios from \"axios\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./js/serviceWorker\";\nimport \"./styles/styles.css\";\n\nexport const store = createStore(\n  reducer,\n  applyMiddleware(thunk.withExtraArgument(Axios))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}